# Copyright 2018 Google LLC.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from this
#    software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from "deepvariant/protos/realigner_pyclif.h" import *
from "third_party/nucleus/protos/reads_pyclif.h" import *

from "deepvariant/realigner/fast_pass_aligner.h":
  namespace `learning::genomics::deepvariant`:
    class FastPassAligner:
      def `set_reference` as set_reference(self, ref: bytes)
      def `set_ref_start` as set_ref_start(self, chr: bytes, pos: int)
      def `set_haplotypes` as set_haplotypes(self, hyplotypes:list<bytes>)
      def `set_options` as set_options(self, options:AlignerOptions)
      def `set_is_debug` as set_is_debug(self, isDebug: bool)
      def `set_normalize_reads` as set_normalize_reads(self,
                                                       normalizeReads: bool)
      def `set_debug_read_id` as set_debug_read_id(self, readId: int)
      def `set_ref_prefix_len` as set_ref_prefix_len(self, ref_prefix_len: int)
      def `set_ref_suffix_len` as set_ref_suffix_len(self, set_ref_suffix_len: int)
      def `AlignReads` as realign_reads(self, reads:list<Read>) -> list<Read>
